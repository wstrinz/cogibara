#!/usr/bin/env ruby
require 'cogibara'
require 'slop'
require 'redis'

def text(msg)
  Cogibara::message_handler.handle(msg)
end


def text_loop
  loop do
    text $stdin.gets
  end
end

def text_or_file
  puts @config_file
  if !@config_file && File.exist?("./#{@msg}")
    Cogibara::file_handler.handle(File.open("./#{ARGV[0]}",'rb').read, "local")
  else
    text(@msg)
  end
end

def parse

  opts = Slop.parse do
    on 'v', 'verbose', 'Verbose output'
    on 'm=', 'message', 'Message'
    on 'n=', 'name', 'Name'
    on 'c=', 'config', 'Configuration file (.rb)'
    on 'r', 'redis', 'Standalone Redis mode'
  end

  @verbose = opts.verbose?
  @msg = opts[:message]
  @name = opts[:name] || "cogibara"
  @config_file = opts[:config]
  @redis_mode = opts[:redis]

  if !@msg
    if @config_file
      @verbose = false
      configure
      text_loop
    else
      @msg = ARGV.join(' ')
      if File.exist?("./#{@msg}")
        ext = @msg.to_s.split('.').last
        @config_file = @msg if %w(yml rb).include? ext
      end
      @verbose = false
    end
  end
end

def configure
  if @config_file
    ext = @config_file.to_s.split('.').last
    if ext == 'yml'
      Cogibara::dispatcher.config_from_yaml(@config_file.to_s)
    else
      load './' + @config_file.to_s 
    end
  else
    Cogibara.default_config
  end
  Cogibara.setup do |config|
    config.name = @name unless @name.nil?
    config.local = true
    config.use_redis = false
    config.verbose = @verbose unless @verbose.nil?
  end
end

def standalone_redis
  @red = Redis.new
  Redis.new.subscribe(:toCapy) do |on|
    on.message do |channel, msg|
      # puts msg
      file = @red.hmget("#{msg}",'file')
      text = @red.hmget("#{msg}",'text')
      client = @red.hmget("#{msg}",'client')[0].to_i
      puts "message from #{client}"
      if file[0]
        puts "Handling as file "
        begin
          Cogibara::FileHandler.new.handle(file[0], client)
        rescue Exception
          puts "an error occured! " + ($!).to_s
        end
      elsif text[0]
        puts "Handling as text"
          Cogibara::message_handler.handle(Cogibara::Message.new(text[0],client))
      end
    end
  end
end

parse

configure

standalone_redis if @redis_mode

ARGV[0] && (@msg != @config_file) ? text_or_file : text_loop